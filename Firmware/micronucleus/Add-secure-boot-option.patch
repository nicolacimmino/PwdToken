From 17eac8b9d717511c4ceb5c7c3568c9d9e36d1ef0 Mon Sep 17 00:00:00 2001
From: Nicola Cimmino <nicola.cimmino@gmail.com>
Date: Tue, 20 Apr 2021 08:05:19 +0200
Subject: [PATCH] Add secure boot option

---
 .../configuration/t85_sec_boot/Makefile.inc   |  62 ++++
 .../t85_sec_boot/bootloaderconfig.h           | 320 ++++++++++++++++++
 firmware/main.c                               |  12 +
 3 files changed, 394 insertions(+)
 create mode 100644 firmware/configuration/t85_sec_boot/Makefile.inc
 create mode 100644 firmware/configuration/t85_sec_boot/bootloaderconfig.h

diff --git a/firmware/configuration/t85_sec_boot/Makefile.inc b/firmware/configuration/t85_sec_boot/Makefile.inc
new file mode 100644
index 0000000..808a821
--- /dev/null
+++ b/firmware/configuration/t85_sec_boot/Makefile.inc
@@ -0,0 +1,62 @@
+# Name: Makefile
+# Project: Micronucleus
+# License: GNU GPL v2 (see License.txt)
+
+# Controller type: ATtiny 85 - 16.5 MHz
+# Configuration:   Default
+# Last Change:     Jun 16,2020
+
+F_CPU = 16500000
+DEVICE = attiny85
+
+# hexadecimal address for bootloader section to begin. To calculate the best value:
+# - make clean; make main.hex; ### output will list data: 1592 (or something like that)
+# - for the size of your device (8kb = 1024 * 8 = 8192) subtract above value = 6598
+# - How many pages in is that? 6598 / 64 (tiny85 page size in bytes) = 103.09377
+# - round that down to 103 - our new bootloader address is 103 * 64 = 6592, in hex = 19C0
+# - The available size for user program is (BOOTLOADER_ADDRESS - POSTSCRIPT_SIZE) with POSTSCRIPT_SIZE = 4 or 6
+# - For data size from 1470 up to 1536 the address is 1A00 (6650 free),
+# - for 1538 to 1600 it is 19C0 (6586 free), for 1602 to 1664 it is 1980 (6522 free)
+BOOTLOADER_ADDRESS = 1980
+
+FUSEOPT = -U lfuse:w:0xe1:m -U hfuse:w:0xdd:m -U efuse:w:0xfe:m
+FUSEOPT_DISABLERESET = -U lfuse:w:0xe1:m -U efuse:w:0xfe:m -U hfuse:w:0x5d:m
+
+#---------------------------------------------------------------------
+# ATtiny85
+#---------------------------------------------------------------------
+# Fuse extended byte:
+# 0xFE = - - - -   - 1 1 0
+#                        ^
+#                        |
+#                        +---- SELFPRGEN (enable self programming flash)
+#
+# Fuse high byte:
+# 0xdd = 1 1 0 1   1 1 0 1
+#        ^ ^ ^ ^   ^ \-+-/
+#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)
+#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)
+#        | | | +-------------- WDTON (watchdog timer always on -> disable)
+#        | | +---------------- SPIEN (enable serial programming -> enabled)
+#        | +------------------ DWEN (debug wire enable)
+#        +-------------------- RSTDISBL (disable external reset -> enabled)
+#
+# Fuse high byte ("no reset": external reset disabled, can't program through SPI anymore)
+# 0x5d = 0 1 0 1   1 1 0 1
+#        ^ ^ ^ ^   ^ \-+-/
+#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)
+#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)
+#        | | | +-------------- WDTON (watchdog timer always on -> disable)
+#        | | +---------------- SPIEN (enable serial programming -> enabled)
+#        | +------------------ DWEN (debug wire enable)
+#        +-------------------- RSTDISBL (disable external reset -> disabled!)
+#
+# Fuse low byte:
+# 0xe1 = 1 1 1 0   0 0 0 1
+#        ^ ^ \+/   \--+--/
+#        | |  |       +------- CKSEL 3..0 (clock selection -> HF PLL)
+#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)
+#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)
+#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)
+
+###############################################################################
diff --git a/firmware/configuration/t85_sec_boot/bootloaderconfig.h b/firmware/configuration/t85_sec_boot/bootloaderconfig.h
new file mode 100644
index 0000000..82864ff
--- /dev/null
+++ b/firmware/configuration/t85_sec_boot/bootloaderconfig.h
@@ -0,0 +1,320 @@
+/* Name: bootloaderconfig.h
+ * Micronucleus configuration file.
+ * This file (together with some settings in Makefile.inc) configures the boot loader
+ * according to the hardware.
+ *
+ * Controller type: ATtiny 85 - 16.5 MHz
+ * Configuration:   Default configuration
+ *       USB D- :   PB3
+ *       USB D+ :   PB4
+ *       Entry  :   Always
+ *       LED    :   None
+ *       OSCCAL :   Stays at 16 MHz
+ * Note: Uses 16.5 MHz V-USB implementation with PLL
+ * Last Change:     Jun 16,2020
+ *
+ * License: GNU GPL v2 (see License.txt
+ */
+#ifndef __bootloaderconfig_h_included__
+#define __bootloaderconfig_h_included__
+
+/* ------------------------------------------------------------------------- */
+/*                       Hardware configuration.                             */
+/*      Change this according to your CPU and USB configuration              */
+/* ------------------------------------------------------------------------- */
+
+#define USB_CFG_IOPORTNAME      B
+  /* This is the port where the USB bus is connected. When you configure it to
+   * "B", the registers PORTB, PINB and DDRB will be used.
+   */
+
+#define USB_CFG_DMINUS_BIT      3
+/* This is the bit number in USB_CFG_IOPORT where the USB D- line is connected.
+ * This may be any bit in the port.
+ * USB- has a 1.5k pullup resistor to indicate a low-speed device.
+ */
+#define USB_CFG_DPLUS_BIT       4
+/* This is the bit number in USB_CFG_IOPORT where the USB D+ line is connected.
+ * This may be any bit in the port, but must be configured as a pin change interrupt.
+ */
+
+#define USB_CFG_CLOCK_KHZ       (F_CPU/1000)
+/* Clock rate of the AVR in kHz. Legal values are 12000, 12800, 15000, 16000,
+ * 16500, 18000 and 20000. The 12.8 MHz and 16.5 MHz versions of the code
+ * require no crystal, they tolerate +/- 1% deviation from the nominal
+ * frequency. All other rates require a precision of 2000 ppm and thus a
+ * crystal!
+ * Since F_CPU should be defined to your actual clock rate anyway, you should
+ * not need to modify this setting.
+ */
+
+/* ----------------------- Optional Hardware Config ------------------------ */
+//#define USB_CFG_PULLUP_IOPORTNAME   B
+/* If you connect the 1.5k pullup resistor from D- to a port pin instead of
+ * V+, you can connect and disconnect the device from firmware by calling
+ * the macros usbDeviceConnect() and usbDeviceDisconnect() (see usbdrv.h).
+ * This constant defines the port on which the pullup resistor is connected.
+ */
+//#define USB_CFG_PULLUP_BIT          0
+/* This constant defines the bit number in USB_CFG_PULLUP_IOPORT (defined
+ * above) where the 1.5k pullup resistor is connected. See description
+ * above for details.
+ */
+
+/* ------------- Set up interrupt configuration (CPU specific) --------------   */
+/* The register names change quite a bit in the ATtiny family. Pay attention    */
+/* to the manual. Note that the interrupt flag system is still used even though */
+/* interrupts are disabled. So this has to be configured correctly.             */
+
+// setup interrupt for Pin Change for D+
+#define USB_INTR_CFG            PCMSK // Pin interrupt enable register
+#define USB_INTR_CFG_SET        (1 << USB_CFG_DPLUS_BIT) // Mask for pin in pin interrupt enable register PCMSK to be set on usbInit
+#define USB_INTR_CFG_CLR        0 // Mask for pin in pin interrupt enable register PCMSK to be cleared on usbInit. 0 = no clear
+#define USB_INTR_ENABLE         GIMSK // Global interrupt enable register
+#define USB_INTR_ENABLE_BIT     PCIE  // Bit position in global interrupt enable register
+#define USB_INTR_PENDING        GIFR  // Register to read interrupt flag
+#define USB_INTR_PENDING_BIT    PCIF  // Bit position in register to read interrupt flag
+
+/* ------------------------------------------------------------------------- */
+/*       Configuration relevant to the CPU the bootloader is running on      */
+/* ------------------------------------------------------------------------- */
+
+// how many milliseconds should host wait till it sends another erase or write?
+// needs to be above 4.5 (and a whole integer) as avr freezes maximum for 4.5ms
+// while writing a FLASH page (even for 128 byte page size:-))
+#define MICRONUCLEUS_WRITE_SLEEP 5
+
+
+/* ---------------------- feature / code size options ---------------------- */
+/*               Configure the behavior of the bootloader here               */
+/* ------------------------------------------------------------------------- */
+
+/*
+ *  Define Bootloader entry condition
+ *
+ *  If the entry condition is not met, the bootloader will not be activated and the user program
+ *  is executed directly after a reset. If no user program has been loaded, the bootloader
+ *  is always active.
+ *
+ *  ENTRY_ALWAYS        Always activate the bootloader after reset. Requires the least
+ *                      amount of code.
+ *
+ *  ENTRY_POWER_ON      Activate the bootloader after power on. This is what you need
+ *                      for normal development with Digispark boards.
+ *                      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+ *                      Since the reset flags are no longer cleared by micronucleus
+ *                      you must clear them with "MCUSR = 0;" in your setup() routine
+ *                      after saving or evaluating them to make this mode work.
+ *                      If you do not reset the flags, the bootloader will be entered even
+ *                      after reset, since the "power on reset flag" PORF in MCUSR is still set.
+ *                      Adds 18 bytes.
+ *
+ *  ENTRY_WATCHDOG      Activate the bootloader after a watchdog reset. This can be used
+ *                      to enter the bootloader from the user program.
+ *                      Adds 22 bytes.
+ *
+ *  ENTRY_EXT_RESET     Activate the bootloader after an external reset was issued by
+ *                      pulling the reset pin low. It may be necessary to add an external
+ *                      pull-up resistor to the reset pin if this entry method appears to
+ *                      behave unreliably.
+ *                      Adds 24 bytes.
+ *
+ *  ENTRY_JUMPER        Activate the bootloader when a specific pin is pulled low by an
+ *                      external jumper.
+ *                      Adds 34 bytes.
+ *
+ *       JUMPER_PIN     Pin the jumper is connected to. (e.g. PB0)
+ *       JUMPER_PORT    Port out register for the jumper (e.g. PORTB)
+ *       JUMPER_DDR     Port data direction register for the jumper (e.g. DDRB)
+ *       JUMPER_INP     Port input register for the jumper (e.g. PINB)
+ *
+ *  ENTRY_D_MINUS_PULLUP_ACTIVATED
+ *                      Activate the bootloader if the D- pin is high, i.e. a pullup resistor
+ *                      is attached and powered. Useful if the pullup is powered by USB V+
+ *                      and NOT ATtiny VCC to save power.
+ *
+ */
+
+#define JUMPER_PIN    PB0
+#define JUMPER_PORT   PORTB
+#define JUMPER_DDR    DDRB
+#define JUMPER_INP    PINB
+
+// These definitions are only required for the #if #elif's below.
+#define ENTRY_ALWAYS    1
+#define ENTRY_WATCHDOG  2
+#define ENTRY_EXT_RESET 3
+#define ENTRY_JUMPER 4
+#define ENTRY_POWER_ON  5
+#define ENTRY_D_MINUS_PULLUP_ACTIVATED_AND_ENTRY_POWER_ON  6
+#define ENTRY_D_MINUS_PULLUP_ACTIVATED_AND_ENTRY_EXT_RESET 7
+
+#define ENTRYMODE ENTRY_JUMPER
+
+#if ENTRYMODE==ENTRY_ALWAYS
+  #define bootLoaderInit()
+  #define bootLoaderExit()
+  #define bootLoaderStartCondition() 1
+#elif ENTRYMODE==ENTRY_WATCHDOG
+  #define bootLoaderInit()
+  #define bootLoaderExit()
+  #define bootLoaderStartCondition() (MCUSR & _BV(WDRF))
+#elif ENTRYMODE==ENTRY_EXT_RESET
+  #define bootLoaderInit()
+  #define bootLoaderExit()
+// On my ATtiny85 I have always 0x03 EXTRF | PORF after power on.
+// After reset only EXTRF is NEWLY set.
+// So we must reset at least PORF flag ALWAYS after checking for this entry condition,
+// otherwise entry condition will NEVER be true if application does not reset PORF.
+  #define bootLoaderStartCondition() (MCUSR == _BV(EXTRF)) // Adds 18 bytes
+#elif ENTRYMODE==ENTRY_JUMPER
+  // Enable pull up on jumper pin and delay to stabilize input
+  #define bootLoaderInit()   {JUMPER_DDR &= ~_BV(JUMPER_PIN); JUMPER_PORT |= _BV(JUMPER_PIN); _delay_ms(1);}
+  #define bootLoaderExit()   {JUMPER_PORT &= ~_BV(JUMPER_PIN);}
+  #define bootLoaderStartCondition() (!(JUMPER_INP & _BV(JUMPER_PIN)))
+#elif ENTRYMODE==ENTRY_POWER_ON
+  #define bootLoaderInit()
+  #define bootLoaderExit()
+  #define bootLoaderStartCondition() (MCUSR & _BV(PORF))
+#elif ENTRYMODE==ENTRY_D_MINUS_PULLUP_ACTIVATED_AND_ENTRY_POWER_ON
+  #define bootLoaderInit()
+  #define bootLoaderExit()
+  #define bootLoaderStartCondition()  ((USBIN & USBIDLE) && (MCUSR & _BV(PORF))) // Adds 22 bytes
+#elif ENTRYMODE==ENTRY_D_MINUS_PULLUP_ACTIVATED_AND_ENTRY_EXT_RESET
+  #define bootLoaderInit()
+  #define bootLoaderExit()
+  #define bootLoaderStartCondition() ((USBIN & USBIDLE) && (MCUSR == _BV(EXTRF))) // Adds 22 bytes
+#else
+   #error "No entry mode defined"
+#endif
+
+/*
+ *  Define MCUSR handling here.
+ *
+ *  Default is to clear MCUSR only if the bootloader is entered.
+ *
+ *  SAVE_MCUSR  The content of the MCUSR register is stored in GPIOR0 register
+ *              and the MCUSR register is cleared, even if the bootloader was not entered.
+ *              The latter is required to prepare for a correct entry condition
+ *              at the next call of the bootloader.
+ *              Adds 6 bytes.
+ *
+ *              The MCUSR content can be accessed by user program with:
+ *              "if (MCUSR != 0) tMCUSRStored = MCUSR; else tMCUSRStored = GPIOR0;"
+ *              The first "if" covers the default bootloader configuration.
+ */
+
+#define SAVE_MCUSR
+
+/*
+ * Define bootloader timeout value.
+ *
+ *  The bootloader will only time out if a user program was loaded.
+ *
+ *  FAST_EXIT_NO_USB_MS        The bootloader will exit after this delay if no USB is connected after the initial 300 ms disconnect and connect.
+ *                             Set to < 120 to disable.
+ *                             Adds 8 bytes.
+ *                             (This will wait for FAST_EXIT_NO_USB_MS milliseconds for an USB SE0 reset from the host, otherwise exit)
+ *
+ *  AUTO_EXIT_MS               The bootloader will exit after this delay if no USB communication from the host tool was received.
+ *                             Set to 0 to disable -> never leave the bootloader except on receiving an exit command by USB.
+ *
+ *  All values are approx. in milliseconds
+ */
+
+// I observed 2 resets. First is 100 ms after initial connecting to USB lasting 65 ms and the second 90 ms later and also 65 ms.
+// On my old HP laptop I have different timing: First reset is 220 ms after initial connecting to USB lasting 300 ms and the second is missing.
+#define FAST_EXIT_NO_USB_MS       0 // Values below 120 are ignored. Effective timeout is 300 + FAST_EXIT_NO_USB_MS.
+#define AUTO_EXIT_MS           6000
+
+/* ----------------------- Optional Timeout Config ------------------------ */
+
+/*
+ *  Defines the setting of the RC-oscillator calibration after quitting the bootloader. (OSCCAL)
+ *
+ *  OSCCAL_RESTORE_DEFAULT    Set this to '1' to revert to OSCCAL factory calibration after bootloader exit.
+ *                            This is 8 MHz +/-2% on most devices for 16 MHz on the ATtiny 85 with activated PLL.
+ *                            Adds ~14 bytes.
+ *
+ *  OSCCAL_SAVE_CALIB         Set this to '1' to save the OSCCAL calibration during program upload in FLASH.
+ *                            This value will be reloaded after reset and will also be used for the user
+ *                            program unless "OSCCAL_RESTORE_DEFAULT" is active. This allows calibrate the internal
+ *                            RC oscillator to the F_CPU target frequency +/-1% from the USB timing. Please note
+ *                            that this is only true if the ambient temperature does not change.
+ *                            Adds ~38 bytes.
+ *
+ *  OSCCAL_HAVE_XTAL          Set this to '1' if you have an external crystal oscillator. In this case no attempt
+ *                            will be made to calibrate the oscillator. You should deactivate both options above
+ *                            if you use this to avoid redundant code.
+ *
+ *  OSCCAL_SLOW_PROGRAMMING   Setting this to '1' will set OSCCAL back to the factory calibration during programming to make
+ *                            sure correct timing is used for the flash writes. This is needed if the micronucleus clock
+ *                            speed significantly deviated from the default clock. E.g. 12 Mhz on ATtiny841 vs. 8Mhz default.
+ *
+ *  If both options are selected, OSCCAL_RESTORE_DEFAULT takes precedence.
+ *
+ *  If no option is selected, OSCCAL will be left untouched and stays at either factory calibration or F_CPU depending
+ *  on whether the bootloader was activated. This will take the least memory. You can use this if your program
+ *  comes with its own OSCCAL calibration or an external clock source is used.
+ */
+
+#define OSCCAL_RESTORE_DEFAULT 0
+#define OSCCAL_SAVE_CALIB 1
+#define OSCCAL_HAVE_XTAL 0
+
+/*
+ *  Defines handling of an indicator LED while the bootloader is active.
+ *
+ *  LED_MODE                  Define behavior of attached LED or suppress LED code.
+ *
+ *          NONE              Do not generate LED code (gains 18 bytes).
+ *          ACTIVE_HIGH       LED is on when output pin is high. This will toggle between 1 and 0.
+ *          ACTIVE_LOW        LED is on when output pin is low.  This will toggle between Z and 0. + 2 bytes
+ *
+ *  LED_DDR,LED_PORT,LED_PIN  Where is your LED connected?
+ *
+ */
+
+#define NONE        0
+#define ACTIVE_HIGH 1
+#define ACTIVE_LOW  2
+
+#define LED_MODE    NONE
+
+#define LED_DDR     DDRB
+#define LED_PORT    PORTB
+#define LED_PIN     PB1
+
+/*
+ *  This is the implementation of the LED code. Change the configuration above unless you want to
+ *  change the led behavior
+ *
+ *  LED_INIT                  Called once after bootloader entry
+ *  LED_EXIT                  Called once during bootloader exit
+ *  LED_MACRO                 Called in the main loop with the idle counter as parameter.
+ *                            Use to define pattern.
+ */
+
+#if LED_MODE==ACTIVE_HIGH
+  #define LED_INIT(x)   LED_DDR |= _BV(LED_PIN);
+  #define LED_EXIT(x)   LED_PORT &= ~_BV(LED_PIN);
+  #define LED_MACRO(x)  if ( x & 0x4c ) {LED_PORT &= ~_BV(LED_PIN);} else {LED_PORT |= _BV(LED_PIN);}
+#elif LED_MODE==ACTIVE_LOW
+  #define LED_INIT(x)   LED_PORT &= ~_BV(LED_PIN);
+  #define LED_EXIT(x)   LED_DDR &= ~_BV(LED_PIN);
+  #define LED_MACRO(x)  if ( x & 0x4c ) {LED_DDR &= ~_BV(LED_PIN);} else {LED_DDR |= _BV(LED_PIN);}
+#elif LED_MODE==NONE
+  #define LED_INIT(x)
+  #define LED_EXIT(x)
+  #define LED_MACRO(x)
+#endif
+
+/*
+ * If SECURE_BOOT is enabled the bootloader will erase the application as soon as it enters.
+ * SECURE_BOOT cannot be enabled unless entry mode is ENTRY_JUMPER otherwise the application
+ * would be deleted at every start
+ */
+
+#define SECURE_BOOT
+
+#endif /* __bootloader_h_included__ */
diff --git a/firmware/main.c b/firmware/main.c
index 9c900e4..9d8b476 100644
--- a/firmware/main.c
+++ b/firmware/main.c
@@ -83,6 +83,10 @@
 #warning "Values below 120 ms are not possible for FAST_EXIT_NO_USB_MS"
 #endif
 
+#if ((defined SECURE_BOOT) && (ENTRYMODE!=ENTRY_JUMPER))
+#error "Do not set SECURE_BOOT without ENTRYMODE=ENTRY_JUMPER, your application will be erased at every reset"
+#endif
+
 // Device configuration reply
 // Length: 6 bytes
 //   Byte 0:  User program memory size, high byte
@@ -401,6 +405,10 @@ int main(void) {
         command = cmd_local_nop; // initialize register 3
         currentAddress.w = 0;
 
+#ifdef SECURE_BOOT            
+        eraseApplication();
+#endif
+
         /*
          * 1. Wait for 5 ms or USB transmission (and detect reset)
          * 2. Interpret and execute USB command
@@ -474,9 +482,13 @@ int main(void) {
             /*
              * command is only evaluated here and set by usbFunctionSetup()
              */
+            
+            // In SECURE_BOOT we erased already the application on entry, ignore command here, save bytes and time
+#ifndef SECURE_BOOT            
             if (command == cmd_erase_application) {
                 eraseApplication();
             }
+#endif            
             if (command == cmd_write_page) {
                 writeFlashPage();
             }
-- 
2.18.0.windows.1

